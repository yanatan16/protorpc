// Code generated by protoc-gen-go.
// source: calc.proto
// DO NOT EDIT!

package example

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// protorpc imports
import "net/rpc"
import "protorpc"

// Reference rpc and protorpc
var _ = rpc.DefaultRPCPath
var _ = protorpc.NewBufferPair

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type CalcRequest struct {
	A                *int64 `protobuf:"varint,1,req,name=a" json:"a,omitempty"`
	B                *int64 `protobuf:"varint,2,req,name=b" json:"b,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (this *CalcRequest) Reset()         { *this = CalcRequest{} }
func (this *CalcRequest) String() string { return proto.CompactTextString(this) }
func (*CalcRequest) ProtoMessage()       {}

func (this *CalcRequest) GetA() int64 {
	if this != nil && this.A != nil {
		return *this.A
	}
	return 0
}

func (this *CalcRequest) GetB() int64 {
	if this != nil && this.B != nil {
		return *this.B
	}
	return 0
}

type CalcResponse struct {
	Result           *int64 `protobuf:"varint,1,req,name=result" json:"result,omitempty"`
	Remainder        *int64 `protobuf:"varint,2,opt,name=remainder" json:"remainder,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (this *CalcResponse) Reset()         { *this = CalcResponse{} }
func (this *CalcResponse) String() string { return proto.CompactTextString(this) }
func (*CalcResponse) ProtoMessage()       {}

func (this *CalcResponse) GetResult() int64 {
	if this != nil && this.Result != nil {
		return *this.Result
	}
	return 0
}

func (this *CalcResponse) GetRemainder() int64 {
	if this != nil && this.Remainder != nil {
		return *this.Remainder
	}
	return 0
}

func init() {
}

// protorpc code
type CalcService interface {
	Add(*CalcRequest, *CalcResponse) error
	Subtract(*CalcRequest, *CalcResponse) error
	Multiply(*CalcRequest, *CalcResponse) error
	Divide(*CalcRequest, *CalcResponse) error
}

func RegisterCalcService(s CalcService) error {
	return rpc.Register(s)
}

type CalcServiceClient struct {
	*rpc.Client
	remoteName string
}

func NewCalcServiceClient(rname, raddr string) (csc *CalcServiceClient, err error) {
	client, err := protorpc.Dial(raddr)
	if err != nil {
		return
	}
	csc = new(CalcServiceClient)
	csc.Client = client
	csc.remoteName = rname
	return
}
func (self *CalcServiceClient) Add(request *CalcRequest, response *CalcResponse) error {
	return self.Call(self.remoteName+".Add", request, response)
}
func (self *CalcServiceClient) AddAsync(request *CalcRequest, response *CalcResponse) chan error {
	ret := make(chan error, 0)
	done := self.Go(self.remoteName+".Add", request, response, make(chan *rpc.Call, 1)).Done
	go func() {
		call := <-done
		ret <- call.Error
	}()
	return ret
}
func (self *CalcServiceClient) Subtract(request *CalcRequest, response *CalcResponse) error {
	return self.Call(self.remoteName+".Subtract", request, response)
}
func (self *CalcServiceClient) SubtractAsync(request *CalcRequest, response *CalcResponse) chan error {
	ret := make(chan error, 0)
	done := self.Go(self.remoteName+".Subtract", request, response, make(chan *rpc.Call, 1)).Done
	go func() {
		call := <-done
		ret <- call.Error
	}()
	return ret
}
func (self *CalcServiceClient) Multiply(request *CalcRequest, response *CalcResponse) error {
	return self.Call(self.remoteName+".Multiply", request, response)
}
func (self *CalcServiceClient) MultiplyAsync(request *CalcRequest, response *CalcResponse) chan error {
	ret := make(chan error, 0)
	done := self.Go(self.remoteName+".Multiply", request, response, make(chan *rpc.Call, 1)).Done
	go func() {
		call := <-done
		ret <- call.Error
	}()
	return ret
}
func (self *CalcServiceClient) Divide(request *CalcRequest, response *CalcResponse) error {
	return self.Call(self.remoteName+".Divide", request, response)
}
func (self *CalcServiceClient) DivideAsync(request *CalcRequest, response *CalcResponse) chan error {
	ret := make(chan error, 0)
	done := self.Go(self.remoteName+".Divide", request, response, make(chan *rpc.Call, 1)).Done
	go func() {
		call := <-done
		ret <- call.Error
	}()
	return ret
}
